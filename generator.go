// Copyright 2018 Simon Pasquier
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package idemvfs

import (
	"bytes"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"strconv"
	"text/template"

	"github.com/shurcooL/httpfs/vfsutil"
)

// Options for the Generate function.
type Options struct {
	// Filename of the generated Go code output (including the extension).
	// If left empty, it defaults to "{{toLower .VariableName}}.go".
	Filename string

	// PackageName is the name of the package in the generating program.
	// If left empty, it default to "name".
	PackageName string

	// VariableName is the name of the Identifier variable in the generating program.
	// If left empty, it default to "identifier".
	VariableName string
}

// Generate Go code that records the modification time, checksum and size for
// all files found in the given http.FileSystem.
func Generate(fs http.FileSystem, opts Options) error {
	if opts.PackageName == "" {
		opts.PackageName = "main"
	}
	if opts.VariableName == "" {
		opts.VariableName = "identifier"
	}
	if opts.Filename == "" {
		opts.Filename = fmt.Sprintf("%s.go", opts.VariableName)
	}

	var identities = make(map[string]idemvfs.Identity)

	walk := func(path string, info os.FileInfo, rs io.ReadSeeker, err error) error {
		if err != nil {
			return err
		}

		f, err := fs.Open(path)
		if err != nil {
			return fmt.Errorf("walk files: %s", err)
		}
		defer f.Close()

		ident, ok := f.(idemvfs.Identity)
		if !ok {
			return fmt.Errorf("type conversion to idemvfs.Identity failed")
		}

		identities[path] = ident
		return nil
	}

	err := vfsutil.WalkFiles(fs, "/", walk)
	if err != nil {
		return err
	}

	buf := new(bytes.Buffer)
	err = t.ExecuteTemplate(buf, "Header", opts)
	if err != nil {
		return err
	}
	err = t.ExecuteTemplate(buf, "Body", identities)
	if err != nil {
		return err
	}
	err = t.ExecuteTemplate(buf, "Footer", nil)
	if err != nil {
		return err
	}

	fmt.Println("writing", opts.Filename)
	err = ioutil.WriteFile(opts.Filename, buf.Bytes(), 0644)
	if err != nil {
		return err
	}

	return nil
}

var t = template.Must(template.New("").Funcs(template.FuncMap{
	"quote": strconv.Quote,
}).Parse(`{{define "Header"}}// Code generated by idemvfsgen; DO NOT EDIT.

// +{{ "build ignore" }}

package {{ .PackageName }}

import (
	"fmt"
	"time"

	"github.com/prometheus/alertmanager/pkg/idemvfs"
)

type identity struct {
	checksum string
	modTime  time.Time
	size     int64
}

func (i identity) Checksum() []byte {
	if len(i.checksum) == 0 {
		return nil
	}
	var b = make([]byte, 0)
	_, err := fmt.Sscanf(i.checksum, "%x", &b)
	if err != nil {
		panic(err)
	}
	return b
}

func (i identity) ModTime() time.Time {
	return i.modTime
}

func (i identity) Size() int64 {
	return i.size
}

type fileIdentifier map[string]identity

func (f fileIdentifier) Identify(name string) (idemvfs.Identity, bool) {
	ident, ok := f[name]
	return ident, ok
}

var {{ .VariableName }} = {{ end }}

{{ define "Body" }}fileIdentifier{ {{- range $key, $value := .}}
	{{ quote $key }}: identity{
		checksum: "{{ $value.Checksum | printf "%x" }}",
		modTime:  {{ template "Time" $value.ModTime }},
		size:     {{ $value.Size | printf "%d" }},
	},{{ end}}
}
{{ end }}

{{ define "Footer" }}{{ end }}

{{define "Time"}}
{{- if .IsZero -}}
	time.Time{}
{{- else -}}
	time.Date({{.Year}}, {{printf "%d" .Month}}, {{.Day}}, {{.Hour}}, {{.Minute}}, {{.Second}}, {{.Nanosecond}}, time.UTC)
{{- end -}}
{{end}}
`))
